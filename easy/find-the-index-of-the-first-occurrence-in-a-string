Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.

 

Example 1:

Input: haystack = "sadbutsad", needle = "sad"
Output: 0
Explanation: "sad" occurs at index 0 and 6.
The first occurrence is at index 0, so we return 0.

Example 2:

Input: haystack = "leetcode", needle = "leeto"
Output: -1
Explanation: "leeto" did not occur in "leetcode", so we return -1.

 

Constraints:

    1 <= haystack.length, needle.length <= 104
    haystack and needle consist of only lowercase English characters.


--------

In python, haystack.find(needle) is a one-liner solution

------

This should be solved using KMP Algorithm:

class Solution:
    def strStr(self, haystack: str, needle: str) -> int:

        # Based on KMP Algorithm
        # This constructs lps array
        # lps: longest proper prefix which is also suffix
        # proper prefix of "ABC" is "", "A", and "AB" and NOT "ABC"
        # proper suffix of "ABC" is "", "C", and "BC"

        pat_len = len(needle)
        lps = [0] * pat_len

        for i in range(pat_len):
            cur = needle[0:i+1]
            cur_len = len(cur)
            for j in range(cur_len):
                if cur[0:j] == cur[cur_len-j:cur_len]:
                    if len(cur[0:j]) > lps[i]:
                        lps[i] = len(cur[0:j])

        i = 0
        j = 0

        while i < len(haystack):

            if haystack[i] == needle[j]:
                i = i + 1
                j = j + 1
            else:
                if j > 0:
                    j = lps[j-1]
                elif j == 0:
                    i = i + 1

            if j == len(needle):
                return i - j

        return -1
