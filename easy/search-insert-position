Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [1,3,5,6], target = 5
Output: 2

Example 2:

Input: nums = [1,3,5,6], target = 2
Output: 1

Example 3:

Input: nums = [1,3,5,6], target = 7
Output: 4

 

Constraints:

    1 <= nums.length <= 104
    -104 <= nums[i] <= 104
    nums contains distinct values sorted in ascending order.
    -104 <= target <= 104

----------------------------

class Solution:
    def searchInsert(self, nums: List[int], target: int) -> int:
        #Find the length
        l = len(nums)

        # Check for obvious - if less than 1st digit, 
        # greater than or equal to last digit
        if target <= nums[0]:
            return 0
        elif target > nums[l-1]:
            return l
        elif target == nums[l-1]:
            return l-1
        else:
            indexat = 0
            # Loop through the nums list, if the number need to be
            # inserted into the first half of if number is in the first half
            # no need to add anything to indexat.
            # else, add the number of positions that has already been moved (the elif condition)
            while l > 1:
                if target < nums[l//2]:
                    nums = nums[0:l//2]
                elif target > nums[l//2]:
                    nums = nums[l//2:l]
                    indexat = indexat + l//2
                else:
                    indexat = indexat + l//2
                    return indexat

                l = len(nums)

            if target > nums[0]:
                indexat = indexat + 1
            return indexat
