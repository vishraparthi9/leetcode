Given an integer x, return true if x is a
palindrome
, and false otherwise.

 

Example 1:

Input: x = 121
Output: true
Explanation: 121 reads as 121 from left to right and from right to left.

Example 2:

Input: x = -121
Output: false
Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.

Example 3:

Input: x = 10
Output: false
Explanation: Reads 01 from right to left. Therefore it is not a palindrome.

 

Constraints:

    -231 <= x <= 231 - 1

 
Follow up: Could you solve it without converting the integer to a string?

---------

class Solution:
    def isPalindrome(self, x: int) -> bool:
        # Converting to string is easier to implement
        #if x < 0:
        #    return False
        #else:
        #    y = str(x)[::-1]
        #    return x == int(y)

        # Reverse the number continuously by divinding with 10
        # and shifting left
        # If the number ends with 0, not a palindrome
        # To check for palindrome, don't need to go through the whole
        # reversal, compare first half with later half.
        # For even length numbers:
        # 1221 - first two are same as last two
        # For odd length numbers:
        # 12321 - same as above and 3 can be ignored by //10 

        if x < 0 or (x!= 0 and x%10 == 0):
            return False
        
        reversed_num = 0

        while x > reversed_num:
            reversed_num = reversed_num * 10 + x % 10
            x //= 10

        # x and reversed_num are 12 (in 1221)
        # x is 12 and reversed_num is 123 in 12321 and hence //10
        return x == reversed_num or x == reversed_num//10 
